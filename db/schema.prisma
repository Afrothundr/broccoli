// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens       Token[]
  sessions     Session[]
  groceryTrips GroceryTrip[]
  items        Item[]
  reminders    Reminder[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql

enum TokenType {
  RESET_PASSWORD
}

model Item {
  id              Int            @id @default(autoincrement())
  name            String
  description     String         @default("")
  price           Float
  quantity        Int
  unit            String         @default("")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          ItemStatusType @default(FRESH)
  percentConsumed Decimal        @default(0)
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  groceryTrip     GroceryTrip    @relation(fields: [groceryTripId], references: [id])
  groceryTripId   Int
  reminders       Reminder[]

  itemTypes ItemType[]
  Job       Job[]
}

model ItemType {
  id                          Int      @id @default(autoincrement())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  name                        String   @unique
  storage_advice              String
  suggested_life_span_seconds BigInt

  items Item[]
}

enum ItemStatusType {
  BAD
  OLD
  FRESH
  EATEN
}

model GroceryTrip {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String   @default("")
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  items Item[]
}

model Reminder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      DateTime
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Job {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  scheduledFor DateTime
  executedAt   DateTime
  item         Item           @relation(fields: [itemId], references: [id])
  itemId       Int
  payload      ItemStatusType
}
