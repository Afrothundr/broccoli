generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  firstName      String
  lastName       String
  email          String        @unique
  hashedPassword String?
  role           String        @default("USER")
  groceryTrips   GroceryTrip[]
  items          Item[]
  reminders      Reminder[]
  sessions       Session[]
  tokens         Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model Item {
  id              Int            @id @default(autoincrement())
  name            String
  description     String         @default("")
  price           Float
  quantity        Int
  importId        String         @default("")
  unit            String         @default("")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          ItemStatusType @default(FRESH)
  percentConsumed Int            @default(0)
  userId          Int
  groceryTripId   Int
  groceryTrip     GroceryTrip    @relation(fields: [groceryTripId], references: [id], onDelete: Cascade)
  receiptId       Int?
  receipt         Receipt?       @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders       Reminder[]
  itemTypes       ItemType[]
}

model ItemType {
  id                          Int      @id @default(autoincrement())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  name                        String   @unique
  category                    String
  storage_advice              String
  suggested_life_span_seconds Int
  items                       Item[]
}

model GroceryTrip {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String    @default("")
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       Item[]
  receipts    Receipt[]
}

model Receipt {
  id            Int           @id @default(autoincrement())
  url           String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  groceryTripId Int?
  GroceryTrip   GroceryTrip?  @relation(fields: [groceryTripId], references: [id], onDelete: Cascade)
  items         Item[]
  status        ReceiptStatus @default(IMPORTED)
  scrapedData   Json?
}

model Reminder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      DateTime
  itemId    Int
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  RESET_PASSWORD
}

enum ItemStatusType {
  BAD
  OLD
  FRESH
  EATEN
  DISCARDED
}

enum ReceiptStatus {
  PROCESSING
  IMPORTED
  ERROR
}
